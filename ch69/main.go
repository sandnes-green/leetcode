// 给你一个非负整数 x ，计算并返回 x 的 算术平方根 。

// 由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。

// 注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。

//

// 示例 1：

// 输入：x = 4
// 输出：2
// 示例 2：

// 输入：x = 8
// 输出：2
// 解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。
//

// 提示：

// 0 <= x <= 231 - 1

package main

import "fmt"

func mySqrt(x int) int {
	// i := 1
	// ans := 0
	// for {
	// 	if i*i > x {
	// 		ans = i - 1
	// 		break
	// 	} else {
	// 		i++
	// 	}
	// }
	// return ans

	//================================
	// 细节思考
	// 比较 mid * mid 与 x 的大小，相等则返回 mid，否则去以 mid 为分割点将区间[0, x] 分成左右区间的两个区间中查找，直到不满足查找条件时退出。

	// 由于非负整数 x（当 x ≠ 0 时） 的平方根一定是落在区间 [1, x/2 + 1]，所以左右边界分别取 1 和 x/2 + 1，而不分别取 0 和 x，这样可缩小查找范围。

	// 为了防止 mid * mid 太大而发生整型溢出，取 mid 跟 x / mid 进行比较。
	// 	说明:
	// 右边界取 x / 2 + 1，不取 x / 2 的原因是 x / 2 会向下取整，使得 x / 2 = 0，此时左边界大于右边界，循环直接退出，导致出现 1 的平方根为 0 的错误。

	// 当 x = 0 时，以下代码也适合。

	l, h := 1, x/2+1
	for l <= h {
		mid := l + (h-l)/2
		if mid == x/mid {
			return mid
		} else if mid > x/mid {
			h = mid - 1
		} else {
			l = mid + 1
		}
	}

	return h
}

func main() {
	fmt.Println(mySqrt(4))
	fmt.Println(mySqrt(8))
}
